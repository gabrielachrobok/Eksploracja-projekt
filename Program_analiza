import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly as py
import plotly.graph_objs as go
import nltk
from nltk.corpus import stopwords


from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

base_file = pd.read_csv(r'C:\Users\Gabriela\Downloads\Musical_instruments_reviews.csv')
base_file['reviewText'] = base_file['reviewText'].astype('string')
base_file['summary'] = base_file['summary'].astype('string')

# #Wstępna analiza danych
#
# base_file.info()
# print(base_file.head())

base_file = base_file.dropna()


#

def calculate_word_count(df, column):
    df['word_count'] = df[column].apply(lambda x: len(str(x).split(" ")))
    print(df[[column, 'word_count']].head())
    print(f'Mean: {df.word_count.mean()}')


def calculate_char_count(df, column):
    df['char_count'] = df[column].str.len()
    print(df[[column, 'char_count']].head())
    print(f'Mean: {df.char_count.mean()}')


def calculate_sentence_count(df, column):
    df['sentence'] = df[column].apply(lambda x: len([word for word in x.split() if word.endswith('.')]))
    print(df[[column, 'sentence']].iloc[:20])
    print(f'Mean: {df.sentence.mean()}')


def calculate_exclam_count(df, column):
    df['exclam'] = df[column].apply(lambda x: len([word for word in x.split() if word.endswith('!')]))
    print(df[[column, 'exclam']].iloc[:20])
    print(f'Mean: {df.exclam.mean()}')


calculate_word_count(base_file, 'reviewText')
calculate_char_count(base_file, 'summary')
calculate_sentence_count(base_file, 'reviewText')
calculate_exclam_count(base_file, 'reviewText')

nltk.download('stopwords')
stop = stopwords.words('english')


def display_stopwords_example():
    print(stop[:10])


def calculate_stopwords_count(df, column):
    df['stopwords'] = df[column].apply(lambda x: len([word for word in x.split() if word in stop]))
    print(df[[column, 'stopwords']].head())
    print(f'Mean: {df.stopwords.mean()}')


def display_reviewer_counts(df):
    review_counts = df['reviewerName'].value_counts()
    print(review_counts)


def plot_ratings_distribution(df, column):
    bins = [1, 2, 3, 4, 5, 6]
    df[column].hist(bins=bins, width=0.95, edgecolor='black', align='left')
    plt.title('Distribution of Ratings')
    plt.xlabel('Rating')
    plt.ylabel('Frequency')
    plt.xticks([1, 2, 3, 4, 5])
    plt.show()


display_stopwords_example()
calculate_stopwords_count(base_file, 'reviewText')
display_reviewer_counts(base_file)
plot_ratings_distribution(base_file, 'overall')


def transform_helpful(row):
    """Przekształca kolumnę 'helpful', usuwając nawiasy kwadratowe i dzieląc string na dwa elementy."""
    positive, total = map(int, row.strip('[]').split(', '))
    return pd.Series([positive, total])


def apply_transform_helpful(df):
    """Stosuje funkcję transform_helpful do DataFrame."""
    df[['helpful_yes', 'helpful_total']] = df['helpful'].apply(transform_helpful)
    print(df[['helpful_yes', 'helpful_total']].describe())


def calculate_helpful_ratio(df):
    """Oblicza stosunek pomocnych głosów do całkowitej liczby głosów i dodaje go do DataFrame."""
    df['helpful_ratio'] = df['helpful_yes'] / df['helpful_total']
    print(df[['reviewText', 'helpful_ratio']])


def plot_helpful_ratio_distribution(df):
    """Rysuje wykres rozkładu stosunku pomocności."""
    df['helpful_ratio'] *= 100
    n, bins, _ = plt.hist(df['helpful_ratio'], bins=10, edgecolor='black', alpha=0.0, histtype='step')
    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    plt.plot(bin_centers, n, color='red', linestyle='-', marker='o')
    plt.title('Rozkład wskaźnika pomocności')
    plt.xlabel('Wskaźnik pomocności (%)')
    plt.ylabel('Częstotliwość')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.show()


apply_transform_helpful(base_file)
calculate_helpful_ratio(base_file)
plot_helpful_ratio_distribution(base_file)

